from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List, Optional
from pydantic import BaseModel

from ..services.{{module_name}}_service import {{ServiceName}}
from ..models.schemas import {{ResponseSchema}}
from ..database import get_db

router = APIRouter(prefix="/api/{{route_prefix}}", tags=["{{TagDescription}}"])

class {{RequestSchema}}(BaseModel):
    """{{RequestDescription}}请求参数"""
    name: str
    description: Optional[str] = None
    is_active: bool = True

    class Config:
        schema_extra = {
            "example": {
                "name": "示例名称",
                "description": "这是示例描述",
                "is_active": True
            }
        }

@router.get("/", response_model=List[{{ResponseSchema}}])
async def get_{{entity_name}}_list(
    skip: int = Query(0, ge=0, description="跳过条数"),
    limit: int = Query(50, ge=1, le=100, description="每页条数"),
    search: Optional[str] = Query(None, description="搜索关键词"),
    db: AsyncSession = Depends(get_db)
) -> List[{{ResponseSchema}}]:
    """获取{{EntityDescription}}列表
    
    Args:
        skip: 跳过条数
        limit: 每页条数
        search: 搜索关键词
        db: 数据库会话
        
    Returns:
        {{EntityDescription}}列表
    """
    try:
        result = await {{ServiceName}}.get_list(db, skip, limit, search)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"获取数据失败: {str(e)}")

@router.post("/", response_model={{ResponseSchema}})
async def create_{{entity_name}}(
    data: {{RequestSchema}},
    db: AsyncSession = Depends(get_db)
) -> {{ResponseSchema}}:
    """创建{{EntityDescription}}
    
    Args:
        data: 创建数据
        db: 数据库会话
        
    Returns:
        创建的{{EntityDescription}}
    """
    try:
        result = await {{ServiceName}}.create(db, data)
        return result
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"创建失败: {str(e)}")

@router.delete("/{item_id}")
async def delete_{{entity_name}}(
    item_id: int,
    db: AsyncSession = Depends(get_db)
) -> dict:
    """删除{{EntityDescription}}
    
    Args:
        item_id: {{EntityDescription}}ID
        db: 数据库会话
        
    Returns:
        删除结果
    """
    try:
        success = await {{ServiceName}}.delete(db, item_id)
        if not success:
            raise HTTPException(status_code=404, detail="{{EntityDescription}}不存在")
        
        return {"success": True, "message": "删除成功"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"删除失败: {str(e)}")